openapi: 3.0.0
info:
  title: New MJP API
  description: |
    New MJP API that allows to search batches both in MJP and PhotoSystem.
    It also offers ability to create MJP batch and upload photos to the created batch
  version: '2'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/We-Integrate/FlexiCar/2
  - url: https://we-integrate.co.nz/mjp/v2
    description: Primary Server
  - url: https://test.we-integrate.co.nz/mjp/v2
    description: Test Server
paths:
  /search:
    post:
      summary: Search for batches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registration:
                  type: string
                  minLength: 2
                  maxLength: 12
                unitNumber:
                  type: integer
                  minimum: 0
                rentalAgreement:
                  type: string
                virNumber:
                  type: string
                location:
                  type: string
                startDate:
                  type: string
                  format: date-time
                  description: Date-time in UTC. Seconds are ignored, example 2017-07-21T17:32:28Z
                limitDate:
                  type: string
                  format: date-time
                  description: Date-time in UTC. Seconds are ignored, example 2017-07-21T17:32:28Z
                country:
                  $ref: '#/components/schemas/Country'
                rentalType:
                  $ref: '#/components/schemas/RentalType'
                brand:
                  $ref: '#/components/schemas/Brand'
                process:
                  type: string
              required:
                - start_date
                - country
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      batches:
                        type: array
                        items:
                          $ref: '#/components/schemas/Batch'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/ErrorResponse'

  /create-batch:
    post:
      summary: Creates new batch. BatchId is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CommonMeta'
                - type: object
                  properties:
                    country:
                      $ref: '#/components/schemas/Country'
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      batchId:
                        type: integer
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/ErrorResponse'

  /upload-photo:
    post:
      summary: Uploads new photo a batch. Use batchId from create-batch
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                batchId:
                  type: string
                  description: Required batchId parameter from create-batch
                sequence:
                  type: string
                  description: Image sequence parameter. Can be any number starting from 0
                timestamp:
                  description: Optional photo timestamp in UTC, example 2017-07-21T17:32:28Z
                  type: string
                  format: date-time
                needRecognition:
                  description: Boolean parameter, can have values 'true' or 'false'.
                    If true then registration is recognized from photo and batch is updated
                    with that registration. 'registration' is returned in response too.
                  type: string
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - type: object
                    properties:
                      registration:
                        type: string
                        nullable: true
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/ErrorResponse'

  /e-repair-upload:
    post:
      summary: Upload to eRepair
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                registration:
                  type: string
                  minLength: 2
                  maxLength: 12
                virNumber:
                  type: string
                location:
                  type: string
                country:
                  $ref: '#/components/schemas/Country'
                photoUrls:
                  type: array
                  items:
                    type: string
                  description: Photo URLs that are uploaded to eRepair
              required:
                - location
                - country
                - photoUrls
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/ErrorResponse'

security:
  - ApiKeyAuth: [ ]

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ErrorResponse:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        success:
          type: integer
        errorMessage:
          type: string

    Success:
      type: object
      properties:
        success:
          type: integer
          enum: [ 1 ]

    RentalType:
      type: string
      enum: [ PRE_RENTAL, RENTAL, POST_RENTAL, ALL ]
    Country:
      type: string
      enum: [ AU, NZ, TEST ]
    Brand:
      type: string
      enum: [ MJP, Flexicar ]

    CommonMeta:
      type: object
      properties:
        registration:
          type: string
          minLength: 2
          maxLength: 12
        rentalAgreement:
          type: string
        virNumber:
          type: string
        location:
          type: string
        unitNumber:
          type: integer
          minimum: 0
        author:
          type: string
          description: Legacy parameter from original MJP.
        authorId:
          type: integer
          description: Legacy parameter from original MJP.
        latitude:
          type: number
        longitude:
          type: number
        rentalType:
          $ref: '#/components/schemas/RentalType'
        brand:
          $ref: '#/components/schemas/Brand'
        process:
          type: string

    Batch:
      allOf:
        - $ref: '#/components/schemas/CommonMeta'
        - type: object
          properties:
            timestamp:
              type: string
              format: date-time
            photoUrls:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
